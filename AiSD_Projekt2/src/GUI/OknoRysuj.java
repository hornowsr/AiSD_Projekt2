/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Struktury.BazaMiast;
import java.awt.Color;
import java.awt.Graphics;

/**
 *
 * @author kuzniarg
 */
public class OknoRysuj extends javax.swing.JPanel {

    /**
     * Creates new form OknoRysuj
     */
    public OknoRysuj() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 658, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 535, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private double kat;

    public void rysuj(BazaMiast baza) {
        this.czysc();
        Graphics g = getGraphics();
        g.setColor(Color.black);

        int n = baza.getN();

        int polaczenia[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19};

        if (n < 4) {
            return;
        }

        kat = 360 / n;
       

        //zaznaczenie połączeń między miastami
        for (int i = 0; i < n; i++) {
            for(int j = 0 ; j < n ; j++){
                if (baza.getMiasto(i).getPolaczenia()[j].getDroga() != 0 && baza.getMiasto(i).getPolaczenia()[j].getDroga() != 0) {
                    zaznaczPolaczenie(polaczenia[i], polaczenia[j]);
                    zaznaczKierunek(polaczenia[i], polaczenia[j]);
                }
            }
        }
        
         //zaznaczanie miast
        for (int i = 0; i < n; i++) {
            if(baza.getMiasto(i).getPolaczenia()[i].getDroga()!=0){
                this.zaznaczMiasto2(wyznaczX(i), wyznaczY(i), baza.getMiasto(i).getNazwa());
            }else{ 
                this.zaznaczMiasto(wyznaczX(i), wyznaczY(i), baza.getMiasto(i).getNazwa());
            }
        }
       

    }

    private void czysc() {
        Graphics g = getGraphics();
        g.setColor(Color.white);
        g.fillRect(0, 0, getWidth(), getHeight());
    }

    private void zaznaczMiasto(int x, int y, String miasto) {
        Graphics g = getGraphics();
        g.setColor(Color.blue);
        g.fillOval(x, y, 10, 10);
        g.drawString(miasto, x, y);
    }
    private void zaznaczMiasto2(int x, int y, String miasto) {
        Graphics g = getGraphics();
        g.setColor(Color.black);
        g.fillOval(x, y, 10, 10);
        g.setColor(Color.blue);
        g.drawString(miasto, x, y);
    }

    private int promien() {
        if (this.getWidth() < this.getHeight()) {
            return this.getWidth() / 2 - 30;
        } else {
            return this.getHeight() / 2 - 30;
        }
    }

    private int wyznaczX(double i) {
        return (this.getWidth() / 2) + (int) (promien() * Math.sin(Math.PI * kat * i / 180));
    }

    private int wyznaczY(double i) {
        return (this.getHeight() / 2) - (int) (promien() * Math.cos(Math.PI * kat * i / 180));
    }

    private void zaznaczPolaczenie(int skad, int dokad) {
        int x1, x2, y1, y2;
        x1 = wyznaczX(skad) + 5;
        y1 = wyznaczY(skad) + 5;
        x2 = wyznaczX(dokad) + 5;
        y2 = wyznaczY(dokad) + 5;
        Graphics g = getGraphics();
        g.setColor(Color.green);
        g.drawLine(x1, y1, x2, y2);
    }
    
    public void zaznaczDroge(int skad, int dokad) {
        int x1, x2, y1, y2;
        x1 = wyznaczX(skad) + 5;
        y1 = wyznaczY(skad) + 5;
        x2 = wyznaczX(dokad) + 5;
        y2 = wyznaczY(dokad) + 5;
        Graphics g = getGraphics();
        g.setColor(Color.blue);
        g.drawLine(x1, y1, x2, y2);
    }

    private void zaznaczKierunek(int skad, int dokad) {
        int x1, x2, y1, y2;
        x1 = wyznaczX(skad) + 5;
        y1 = wyznaczY(skad) + 5;
        x2 = wyznaczX(dokad) + 5;
        y2 = wyznaczY(dokad) + 5;
        x1 = (int) (x1 + 0.9 * (x2 - x1));
        y1 = (int) (y1 + 0.9 * (y2 - y1));
        Graphics g = getGraphics();
        g.setColor(Color.red);
        g.drawLine(x1, y1, x2, y2);
        g.drawLine(x1 - 1, y1 - 1, x2 - 1, y2 - 1);
        g.drawLine(x1 + 1, y1 + 1, x2 + 1, y2 + 1);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
